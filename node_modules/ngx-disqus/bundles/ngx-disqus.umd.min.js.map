{"version":3,"file":"ngx-disqus.umd.min.js","sources":["../../tmp/module/disqus.service.ts","../../tmp/module/lib.module.ts","../../tmp/module/disqus.component.ts"],"sourcesContent":["import { SHORTNAME } from './lib.module';\nimport { Injectable, Inject } from '@angular/core';\n\ndeclare const global: any;\nexport class DisqusService {\n/**\n * @param {?} shortname\n */\nconstructor(\npublic shortname: string) {\n  }\n/**\n * @return {?}\n */\nget window() {\n    return _window();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [SHORTNAME, ] }, ]},\n];\n}\n\nfunction DisqusService_tsickle_Closure_declarations() {\n/** @type {?} */\nDisqusService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDisqusService.ctorParameters;\n/** @type {?} */\nDisqusService.prototype.shortname;\n}\n\n/**\n * @return {?}\n */\nfunction _window() {\n  return typeof window !== 'undefined' ? window : global;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { DisqusComponent } from './disqus.component';\nimport { DisqusService } from './disqus.service';\n/**\n * Initialize Disqus with shortname\n * @param {?} shortname\n * @return {?}\n */\nexport function DisqusFactory(shortname: string) {\n  return new DisqusService(shortname);\n}\nexport const /** @type {?} */ SHORTNAME = new InjectionToken<string>('SHORTNAME');\nexport class DisqusModule {\n/**\n * @param {?} shortname\n * @return {?}\n */\nstatic forRoot(shortname: string): ModuleWithProviders {\n    return {\n      ngModule: DisqusModule,\n      providers: [\n        { provide: SHORTNAME, useValue: shortname },\n        {\n          provide: DisqusService,\n          useFactory: DisqusFactory,\n          deps: [SHORTNAME]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [DisqusComponent],\n  exports: [DisqusComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DisqusModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDisqusModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDisqusModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  Renderer2,\n  ElementRef,\n  EventEmitter\n} from '@angular/core';\nimport { DisqusService } from './disqus.service';\nimport { DisqusComment, DisqusReady } from './disqus.model';\nexport class DisqusComponent implements OnChanges, OnDestroy {\n/**\n * DISQUS options\n */\nurl: string;\n   identifier: string;\n   title: string;\n   category: string;\n   language: string;\n/**\n * DISQUS events\n */\nonNewComment = new EventEmitter<DisqusComment>();\n   onReady = new EventEmitter<DisqusReady>();\n   onPaginate = new EventEmitter<any>();\n/**\n * @param {?} renderer\n * @param {?} el\n * @param {?} dService\n */\nconstructor(private renderer: Renderer2,\nprivate el: ElementRef,\nprivate dService: DisqusService) { }\n/**\n * @return {?}\n */\nngOnChanges() {\n    /** Reset Disqus if any input changed */\n\n    if (!this.dService.window.DISQUS) {\n      this.addDisqusScript();\n    } else {\n      this.reset();\n    }\n  }\n/**\n * Add DISQUS script\n * @return {?}\n */\naddDisqusScript() {\n\n    /** Set DISQUS config */\n    this.dService.window.disqus_config = this.getConfig();\n\n    const /** @type {?} */ disqusScript = this.renderer.createElement('script');\n    disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;\n    disqusScript.async = true;\n    disqusScript.type = 'text/javascript';\n    this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());\n    this.renderer.appendChild(this.el.nativeElement, disqusScript);\n  }\n/**\n * Reset DISQUS with the new config\n * @return {?}\n */\nreset() {\n    this.dService.window.DISQUS.reset({\n      reload: true,\n      config: this.getConfig()\n    });\n  }\n/**\n * Create DISQUS config from inputs\n * @return {?}\n */\ngetConfig() {\n    const /** @type {?} */ self = this;\n    return function () {\n      this.page.identifier = self.identifier;\n      this.page.url = self.validateUrl(self.url);\n      this.page.title = self.title;\n      this.category_id = self.category;\n      this.language = self.language;\n\n      /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */\n      this.callbacks.onNewComment = [(e) => {\n        self.onNewComment.emit(e);\n      }];\n\n      this.callbacks.onReady = [(e) => {\n        self.onReady.emit(e);\n      }];\n\n      this.callbacks.onPaginate = [(e) => {\n        self.onPaginate.emit(e);\n      }];\n    };\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nvalidateUrl(url: string) {\n    /** Validate URL input */\n    if (url) {\n      const /** @type {?} */ r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return url;\n      } else {\n        console.warn('[Disqus]: Invalid URL, return undefined');\n      }\n    }\n    /** DISQUS will fallback to \"Window.location.href\" when URL is undefined */\n    return undefined;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.dService.window.DISQUS = undefined;\n    this.dService.window.disqus_config = undefined;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'disqus',\n  template: '<div id=\"disqus_thread\"></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: DisqusService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'url': [{ type: Input },],\n'identifier': [{ type: Input },],\n'title': [{ type: Input },],\n'category': [{ type: Input },],\n'language': [{ type: Input },],\n'onNewComment': [{ type: Output },],\n'onReady': [{ type: Output },],\n'onPaginate': [{ type: Output },],\n};\n}\n\nfunction DisqusComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDisqusComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDisqusComponent.ctorParameters;\n/** @type {?} */\nDisqusComponent.propDecorators;\n/**\n * DISQUS options\n * @type {?}\n */\nDisqusComponent.prototype.url;\n/** @type {?} */\nDisqusComponent.prototype.identifier;\n/** @type {?} */\nDisqusComponent.prototype.title;\n/** @type {?} */\nDisqusComponent.prototype.category;\n/** @type {?} */\nDisqusComponent.prototype.language;\n/**\n * DISQUS events\n * @type {?}\n */\nDisqusComponent.prototype.onNewComment;\n/** @type {?} */\nDisqusComponent.prototype.onReady;\n/** @type {?} */\nDisqusComponent.prototype.onPaginate;\n/** @type {?} */\nDisqusComponent.prototype.renderer;\n/** @type {?} */\nDisqusComponent.prototype.el;\n/** @type {?} */\nDisqusComponent.prototype.dService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["window","global","shortname","DisqusService","this","Object","_window","type","Injectable","undefined","decorators","Inject","args","SHORTNAME","renderer","el","dService","EventEmitter","DisqusComponent","DISQUS","reset","addDisqusScript","disqus_config","getConfig","disqusScript","createElement","src","async","setAttribute","Date","getTime","toString","appendChild","nativeElement","reload","config","self","page","identifier","url","validateUrl","title","category_id","category","language","callbacks","onNewComment","e","emit","onReady","onPaginate","test","console","warn","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Renderer2","ElementRef","Input","Output","InjectionToken","DisqusModule","ngModule","providers","provide","useValue","useFactory","DisqusFactory","deps","NgModule","declarations","exports"],"mappings":"gPA2CA,cACE,MA3ByB,mBAAXA,QAAyBA,OAASC,OCTlD,WAHCC,GAIC,MAHO,IAAIC,GAAcD,GDF3B,iBAIA,WAAsBA,GAAAE,eAAAF,EAkBtB,MAZAG,uBAHGF,0BAGH,WACI,MAHOG,0DAGTC,KAAMC,eAGPL,iBAAA,WAAA,QAMAI,SAAME,GAPSC,aAAWH,KAAYI,SAAEC,MAASC,OEJlD,kBAoBA,WAHsBC,EAA6BC,EAAwBC,GAArDZ,cAAAU,EAA6BV,QAAAW,EAAwBX,cAAAY,EAL3EZ,kBACI,GAAAa,gBAADb,aACU,GAAIa,gBAAdb,gBACa,GAAIa,gBA2HpB,MAhHAC,yBAAA,WAJSd,KAAKY,SAAShB,OAAOmB,OAUxBf,KAPKgB,QAKLhB,KAPKiB,mBAgBXH,4BAAA,WAGId,KATKY,SAAShB,OAAOsB,cAAgBlB,KAAKmB,WAW1C,IATMC,GAAepB,KAAKU,SAASW,cAAc,SAUjDD,GATaE,IAAM,KAAAtB,KAAUY,SAASd,iCAUtCsB,EATaG,OAAQ,EAUrBH,EATajB,KAAO,kBAUpBH,KATKU,SAASc,aAAaJ,EAAc,kBAAkB,GAAIK,OAAOC,UAAUC,YAUhF3B,KATKU,SAASkB,YAAY5B,KAAKW,GAAGkB,cAAeT,IAerDN,kBAAA,WACId,KAXKY,SAAShB,OAAOmB,OAAOC,OAY1Bc,QAXQ,EAYRC,OAXQ/B,KAAKmB,eAkBnBL,sBAAA,WACI,GAbMkB,GAAOhC,IAcb,OAbO,YAcLA,KAbKiC,KAAKC,WAAaF,EAAKE,WAc5BlC,KAbKiC,KAAKE,IAAMH,EAAKI,YAAYJ,EAAKG,KActCnC,KAbKiC,KAAKI,MAAQL,EAAKK,MAcvBrC,KAbKsC,YAAcN,EAAKO,SAcxBvC,KAbKwC,SAAWR,EAAKQ,SAgBrBxC,KAbKyC,UAAUC,cAAe,SAAEC,GAc9BX,EAbKU,aAAaE,KAAKD,KAgBzB3C,KAbKyC,UAAUI,SAAU,SAAEF,GAczBX,EAbKa,QAAQD,KAAKD,KAgBpB3C,KAbKyC,UAAUK,YAAa,SAAEH,GAc5BX,EAbKc,WAAWF,KAAKD,OAqB7B7B,wBAAA,SAhBGqB,GAkBC,GAAIA,EAhBK,CAmBP,GAlBU,gFAEJY,KAAKZ,GAiBT,MAhBOA,EAkBPa,SAhBQC,KAAK,6CAyBrBnC,wBAAA,WACId,KAlBKY,SAAShB,OAAOmB,WAASV,GAmB9BL,KAlBKY,SAAShB,OAAOsB,kBAAgBb,wBAGvCF,KAAM+C,YAAW1C,OAmBjB2C,SAlBU,SAmBVC,SAlBU,iCAmBVC,gBAlBiBC,0BAAwBC,WAI1CzC,iBAAA,WAAA,QAqBAX,KAAMqD,cACNrD,KAAMsD,eACNtD,KAAMJ,KAlBAe,kBAqBPqB,MApBUhC,KAAMuD,UAqBhBxB,aApBiB/B,KAAMuD,UAqBvBrB,QApBYlC,KAAMuD,UAqBlBnB,WApBepC,KAAMuD,UAqBrBlB,WApBerC,KAAMuD,UAqBrBhB,eApBmBvC,KAAMwD,WAqBzBd,UApBc1C,KAAMwD,WAqBpBb,aApBiB3C,KAAMwD,WDtHvB,IAHalD,GAAY,GAAImD,kBAAsB,0BAInD,cA6BA,MA7BGC,WAKH,SALG/D,GAMC,OACEgE,SALUD,EAMVE,YAJIC,QAASvD,EAAWwD,SAAUnE,IAO9BkE,QALSjE,EAMTmE,WALYC,EAMZC,MALM3D,2BAMdN,KAAMkE,WAAU7D,OAMhB8D,cALcxD,GAMdyD,SALSzD,OAIV+C,iBAAA,WAAA"}